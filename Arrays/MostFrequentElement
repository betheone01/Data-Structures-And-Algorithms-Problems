Most Frequently Occurring Item in an Array (Java)
Find the most frequently occurring item in an array.
Example: The most frequently occurring item in [1, 3, 1, 3, 2, 1] is 1.
if the array is empty, you should return null (in there is always a single, 
unique value that appears most frequently unless For instance, you won't be given an array such as [1, 1, 2, 2].

SOLUTION :-

import java.util.*;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;
public class Main
{
	public static void main(String[] args) {
	    
	    //Naive Approach  

	    Scanner sc=new Scanner (System.in);
		int arr[]=new int [6];

		for(int i=0;i<arr.length;i++)
		{
		    arr[i]=sc.nextInt();
		}
		int count=1,maxcount=Integer.MIN_VALUE;
		int mostFreqEle=0;
		for(int i=0;i<arr.length;i++)
		{
		    for(int j=i+1;j<arr.length;j++)
		    {
		        if(arr[i]==arr[j])
		        {
		            count++;
		        }
		        
		    }
		    if(count>maxcount)
		        {
		            maxcount=count;
		            mostFreqEle=arr[i];
		            count=0;
		        }
		    
		}
		System.out.println("Most frequent ele is "+mostFreqEle+"  count =" +maxcount);

		// Time complexity O(n^2).
	********************************************************************************************************************************************
		//Optimised Approach HashMap TC: O(n)
		HashMap<Integer,Integer>map=new HashMap<>();
		for(int i:arr)
		{
		    if(map.containsKey(i))
		    {
		        map.put(i,map.get(i)+1);
		    }
		    else{
		        map.put(i,1);
		    }
		}
		count=0;
		int mostFreqElement=0;
		Set<Entry<Integer, Integer>> entrySet = map.entrySet();
		for(Entry<Integer, Integer> entry : entrySet)
		{
		     if(entry.getValue() > count)
        {
                mostFreqElement = entry.getKey();
                count = entry.getValue();
        }
		}
		System.out.println("Most frequent ele is "+mostFreqEle+"  count =" +maxcount);
		

	}
}
